#!/usr/bin/env python

# Copyright (c) 2011, Nathan Wiegand <nathanwiegand@gmail.com>,
# Keir Mierle <mierle@gmail.com> All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

################################################################################
# TODO(nathanwiegand):
# Need to do the following before launch:
#    1.) Make it work with branches and commit numbers.
#    2.) Add support for pull request URLs
#        (e.g. https://github.com/vangogh/vangogh/pull/1)
#    3.) Detect and bail when we get a bad URL.
#
# Need to do the following sometime soon:
#    1.) Have the decription auto-populated with only the commit information
#        about the commits since the last merge.
#    2.) Allow the user to override the reviewer line.
#    3.) Have the Rietveld server read from a config (search local, then in the
#        repo) and if none then default to http://codereview.appspot.com
################################################################################

__author__ = ['nathanwiegand@gmail.com', 'mierle@gmail.com']

import os
import re
import shutil
import subprocess
import sys
import tempfile
import urllib2

try:
    import upload
except:
    print >> sys.stderr, "Missing upload.py."
    print >> sys.stderr, "Try http://codereview.appspot.com/static/upload.py"
    sys.exit(1)

try:
    import json
except:
    sys.path.append(os.path.join(sys.path[0], "third_party"))
    import simplejson as json

def git(commands, use_stdout = False):
    c = "git %s" % commands
    f = sys.stdout
    if not use_stdout:
        f = subprocess.PIPE
    process = subprocess.Popen(c.split(), stdout = f, stderr = f)

    output = ""
    if process.stdout:
        stdout_output, stderr_output = process.communicate()
        output = stdout_output
    process.wait()
    return output

def check_if_executable_exists(name):
    """Checks if an executable named 'name' is in the PATH.

    This is necessary because the 'which' command isn't universally portable.

    Args:
        name: String name of a binary, e.g. 'which'
    Returns:
        True if there is an executable with this name anywhere in the system
        PATH.
    """
    for p in os.getenv("PATH").split(os.pathsep):
        full_path = "%s/%s" % (p, name)

        if os.path.exists(full_path) and os.access(full_path, os.X_OK):
            return True
    return False

def get_fork_information(components):
    """Retrieves the JSON metadata about a project.

    The GitHub API allows us to retrieve meta-data about a particular user's
    project.  This function takes a dictionary, 'components', which must have
    project and user defined, corresponding to the GitHub username and the
    GitHub project name.

    Args:
        components: A dictionary which contains 'user' and 'project'
    Returns:
        A dict corresponding to the JSON metadata returned by GitHub for this
        project. An example of the meta data returned can be seen by calling
        get_fork_information({'user': 'vangogh', 'project':'vangogh'})
    """
    url = "https://github.com/api/v2/json/repos/show/%(user)s/%(project)s" \
          % components

    request = urllib2.Request(url)
    try:
      f = urllib2.urlopen(request)
    except urllib2.URLError:
      return {}
    response = json.loads(f.read())
    f.close()
    return response

def read_url(url):
    """Return the contents of a URL.

    This is a simple helper function which downloads a URL, and if the HTTP
    status was OK (200) then it returns the contents of that URL. Otherwise it
    returns an empty string.

    Args:
        url: The URL to fetch
    Returns:
        String contents of the URL If the URL was fetched successfully or empty
        string otherwise.
    """
    # pull the new version
    request = urllib2.Request(url)
    try:
      f = urllib2.urlopen(request)
    except urllib2.URLError:
      return ""

    contents = f.read()
    f.close()
    return contents

def read_json_url(url):
    """Reads the contents of a URL and interprets the JSON response.

    Args:
        url: The URL to fetch
    Returns:
        Dictionary equivalent of the JSON contents of the URL
    """
    contents = read_url(url)
    if contents:
        return json.loads(contents)
    return {}

def parse_github_path(url):
    """Interprets a GitHub URL.

    GitHub URLs encode information about a branch in a human readable format.
    This function parses out that infomation and returns it in a dictionary.

    Args:
        url: The GitHub URL of the project, a branch, a commit, or a file.
    Returns:
        A dictionary which encodes infomration about the project. An example:
          {'host': 'github.com',
           'user': 'vangogh',
           'project': 'vangogh',
           'github_view_type': 'blob',
           'file': 'vangogh',
           'commit': 'master',
           'line': '',
           'type': 'file',
           'github_view_type': 'blob'
          }
    """
    components_regex = re.compile(
          "https://([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^#]+)#?(.*)$")

    components = components_regex.match(url)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'github_view_type': components.group(4),
            'commit': components.group(5),
            'file': components.group(6),
            'line': components.group(7),
            'type': 'file'
        }
    components_regex = re.compile(
        "https://([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)$")
    components = components_regex.match(url)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'tree': components.group(4),
            'branch': components.group(5),
            'type': 'branch'
        }

    components_regex = re.compile( "https://([^/]+)/([^/]+)/([^/]+)$")
    components = components_regex.match(url)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'type': 'repo'
        }

def make_github_url(components):
    """Constructs a GitHub URL to either a file or project.

    Given a dictionary of components that contains the fields 'user', 'host',
    and 'projects' (optionally 'commit' and 'file'), generate a GitHub URL.

    Args:
        components: A dictionary that must contain 'host', 'user', and
        'project'.
    Returns:
        String URL to a GitHub project or a GitHub file.
    """
    if components['type'] == 'file':
        return ("https://%(host)s/%(user)s/%(project)s/"
                "%(github_view_type)s/%(commit)s/%(file)s") % components
    else:
        return ("https://%(host)s/%(user)s/%(project)s/"
                "%(tree)s/%(branch)s") % components

def create_git_repo():
    """Creates a fresh Git repository in a temporary directory.

    Returns:
        String path to the new Git repository.
    """
    print "Creating a temporary git repository."
    path = tempfile.mkdtemp()
    os.chdir(path)

    git("init")
    return path

def write_file_and_commit(name, contents):
    """Create a file with a specified name and contents, and then commit it to
    the repository.

    Args:
        name: The string file name of the new file
        contents: The string contents of the new file
    Returns:
        True on success
    """
    print "Writing a file of %d bytes" % len(contents)
    o = open(name, 'w')
    print >> o, contents
    o.close()

    print "Committing new file to repo"

    git("add %s" % name)

    git("commit -am 'review'")
    return True

def create_subdirectories(components, path):
    """Creates subdirectories corresponding to the directory structure of the
    GitHub repository.

    Returns:
      Nothing
    """
    file_path = components["file"]
    if file_path.find(os.sep) < 0:
      # This is already a file
      os.chdir(path)
      return
    dirs = os.path.dirname(file_path)

    # create the directory
    os.makedirs(dirs)
    os.chdir(path + "/" + dirs)

def pull_file_and_head_version(components, mainline_components):
    """Copies a file from two branches and commits them to the same repo.

    This copyies the 'original' file to the repo, followed by the 'new' file.
    Because of this, the diff between versions of this file will now correspond
    to the diff between the two versions: 'original' and 'new'.
    """
    print "Copying %s" % components["file"]
    url = make_github_url(components)

    file_path = components["file"]
    file_name = os.path.basename(file_path)

    # pull the new version
    contents = read_url(url)

    # pull the mainline version
    mainline_url = make_github_url(mainline_components)

    mainline_contents = read_url(mainline_url)

    write_file_and_commit(file_name, mainline_contents)
    write_file_and_commit(file_name, contents)

def upload_to_codereview(components):
    """Uploads the diffs to the Reitveld instance.

    Args:
        mainline_components: Dict containing the fields 'user' and 'project'
        which correspond to the mainline project's username and project.
    """
    diff = "HEAD^"
    if components['type'] != "file":
        diff = "master"

    description = git('log --pretty=format:%s ' + diff)
    subject = ""
    if len(description.splitlines()) > 0:
        subject = description.splitlines()[0]

    cc = ""
    # TODO(nathanwiegand): Have both of these values be overridable.
    user_email = git('config --global user.email')
    server = 'codereview.appspot.com'
    # TODO(nathanwiegand): Is this the correct thing to do? To make the person
    # who ran the script the reviewer and the person who owns the target repo be
    # CCd?
    if "email" in components:
        cc = (components['email'])

    issue, patchset = upload.RealMain(['upload',
                                       '--assume_yes',
                                       '--server', server,
                                       '--email', user_email,
                                       '--message', subject,
                                       '--description', description,
                                       '--reviewers', user_email,
                                       '--cc', cc,
                                       '--quiet',
                                       diff])
    print "Successfuly created codereview at:"
    print "    http://%s/%s" % (server, issue)

def clean_up(path):
    """Delete the temporary directory specified by 'path'

    Args:
        path: String path to the temporary directory which will be deleted.
    """
    shutil.rmtree(path)

def pull_branches(components, mainline_components):
    """Pulls two branches, one ontop of the other.

    This allows us to diff all files in one branch, 'components', with the
    another, 'original'.

    Args:
        components: Dict specifying the new branch. Must contain 'user' and
              'project'
        mainline_components: Dict specifying the original branch. Must contain
              'user' and 'project'
    """
    mainline_url = 'git@github.com:%(user)s/%(project)s.git' % \
        mainline_components

    url = 'git@github.com:%(user)s/%(project)s.git' % components
    print "Pulling from: " , mainline_url
    git('pull %s master' % mainline_url)

    git('checkout -b %s ' % components['user'])

    print "Pulling from: " , url
    git('pull %s master' % url)

def get_user_information(components):
    user_info = read_json_url("https://api.github.com/users/%(user)s" %
                              components)
    return user_info

def cat_with_default(argv):
    if len(argv) != 2:
        print >> sys.stderr, ("usage: vangogh --cat_with_default "
                              "requires exactly one argument")
        return 1
    file_name = argv[1]

    if not os.path.exists(file_name):
        print >> sys.stderr, ("%s doesn't exist" % file_name)
        return 1
    f = open(file_name, 'r')
    contents = f.read()
    f.close()

    stripcomment_re = re.compile(r'^#.*$', re.MULTILINE)
    contents = stripcomment_re.sub('', contents).strip()
    if not contents:
        f = open(file_name, 'w')
        print >> f, "A vangogh code review"
        f.close()
    return 0

def main(argv):
    if len(argv) > 2 and argv[1] == "--cat_with_default":
        return cat_with_default(argv[1:])

    if len(argv) != 2:
        print >> sys.stderr, "usage: vangough <url>"
        return 1

    if not check_if_executable_exists('git'):
        print >> sys.stderr, "ERROR: git not in path."
        return 1

    file_url = argv[1]
    components =  parse_github_path(file_url)

    fork_info = get_fork_information(components)
    mainline_components = components.copy()

    if 'repository' not in fork_info or 'parent' not in fork_info['repository']:
        print "vangogh only operates on projects which are forks."
        return 1
    user_project_regex = re.compile("([^/]+)/(.*)$")
    user_project = user_project_regex.match(
            fork_info['repository']['parent'])
    if not user_project:
        print "Couldn't parse response from github."
        return 1
    mainline_components['user'] = user_project.group(1)
    mainline_components['project'] = user_project.group(2)
    mainline_components['branch'] = 'master'

    user_info = get_user_information(components)
    mainline_user_info = get_user_information(mainline_components)

    if 'email' in user_info:
        components['email'] = user_info['email']

    if 'email' in mainline_user_info:
        mainline_components['email'] = mainline_user_info['email']

    repo_path = create_git_repo()

    if components['type'] == 'file':
        # Change the 'github_view_type' to 'raw' so that we get the raw file
        # instead of the github html marked up version.
        components['github_view_type'] = 'raw'
        mainline_components['github_view_type'] = 'raw'
        create_subdirectories(components, repo_path)
        pull_file_and_head_version(components, mainline_components)
        upload_to_codereview(components)
    elif components['type'] == 'branch' or components['type'] == 'repo':
        pull_branches(components, mainline_components)
        upload_to_codereview(components)
    clean_up(repo_path)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
